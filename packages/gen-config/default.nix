{ inputs, lib, writeText, writeScriptBin, runCommand, yq, ... }:
let
  genfile = { dest, json }:
    if (lib.strings.hasSuffix "yaml" (lib.strings.toLower dest)) then
      runCommand "out.yaml"
        {
          buildInputs = [ yq ];
          json = writeText "out.json" json;
        } ''
        (echo "# !!!!!!!! AUTO-GENERATED FILE, DO NOT MODIFY !!!!!!!!"
         echo "# This file can be regenerated by the following command:"
         echo "#   $ nix run .#gen-config"
         echo
         yq -y -r --yml-out-ver 1.2 '.' "$json" 
         ) > "$out"
      ''
    else
      writeText "out.json" json;

  files = (builtins.attrNames (builtins.readDir "${inputs.self}/gen"));

  scripts =
    lib.pipe files [
      (map (file: import "${inputs.self}/gen/${file}" { inherit lib; }))
      (map (aset:
        {
          dest = aset._gentarget;
          json = (builtins.toJSON (lib.filterAttrs (n: v: n != "_gentarget") aset));
        }))
      (map (aset:
        {
          outfile = genfile aset;
          dest = aset.dest;
        }))
      (map (aset:
        ''
          dest="$root/${aset.dest}"

          echo "Updating file: $dest" >&2
        
          cp -f ${aset.outfile} "$dest"
        ''
      ))
    ];
in
writeScriptBin "gen-config"
  (lib.strings.concatLines (
    [
      ''
        set -euxo pipefail
        root=$(git rev-parse --show-toplevel)
      ''
    ] ++ scripts
  ))
  
