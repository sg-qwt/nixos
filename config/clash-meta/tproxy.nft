{ ports, fwmark, nft-table }:
''
table inet ${nft-table}
delete table inet ${nft-table}

table inet ${nft-table} {
    set reserved4 {
	typeof ip daddr
	flags interval
	elements = {
	    127.0.0.0/8,       # loopback
	    192.168.0.0/16,    # private
	    224.0.0.0/4,       # multicast
	    255.255.255.255/32 # limited broadcast
	}
    }

    set reserved6 {
	typeof ip6 daddr
	flags interval
	elements = {
	    ::1/128,  # loopback
	    fc00::/7, # private
	    fe80::/10 # link-local
	}
    }

    chain dnsfw {
	type nat hook output priority filter;
	udp dport 53 redirect to ${toString ports.clash-dns}
	tcp dport 53 redirect to ${toString ports.clash-dns}
    }

    chain prerouting {
	type filter hook prerouting priority filter; policy accept;

	mark ${fwmark} meta l4proto { tcp, udp } tproxy to :${toString ports.clash-tproxy} accept

	jump filter
    }

    chain output {
	type route hook output priority filter; policy accept;

	socket cgroupv2 level 2 "system.slice/clash-meta.service" return

	jump filter

	meta l4proto { tcp, udp } meta mark set ${fwmark}
    }

    chain filter {
	fib daddr type local accept
	ip  daddr @reserved4 accept
	ip6 daddr @reserved6 accept
    }
}
''
